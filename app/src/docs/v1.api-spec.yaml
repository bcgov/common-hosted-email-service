---
openapi: 3.0.2
info:
  version: 1.0.0
  title: Common Hosted Email Service API
  description: CHES - Powered by NodeMailer (a shared library)
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: NR Common Service Showcase
    email: NR.CommonServiceShowcase@gov.bc.ca
servers:
  - url: /api/v1
    description: This Server
security:
  - BearerAuth: []
    OpenID: []
paths:
  /health:
    get:
      summary: Returns health checks of external service dependencies.
      description: >-
        This endpoint returns the state and connectivity of any external
        services CHES depends on.
      operationId: getHealth
      tags:
        - Health
      responses:
        '200':
          description: Returns the healthiness of the service dependencies
          content:
            application/json:
              schema:
                type: object
                required:
                  - dependencies
                properties:
                  dependencies:
                    type: array
                    description: A list of Health states
                    items:
                      $ref: '#/components/schemas/Health'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /email:
    post:
      summary: Send an email
      description: >-
        This endpoint accepts a single message and adds it to the queue. Should
        there be validation errors, the endpoint will return a list of reasons
        why it failed validation.
      operationId: postEmail
      tags:
        - Email
      requestBody:
        description: Fields required to perform a mail merge and send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageObject'
      responses:
        '201':
          description: Returns the message correspondence id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /emailMerge:
    post:
      summary: Template mail merge & email sending
      description: >-
        This endpoint performs an email merge by serializing out the content and
        template and then adding the messages to the queue. Should there be
        validation errors, the endpoint will return a list of reasons why it
        failed validation.
      operationId: postMerge
      tags:
        - EmailMerge
      requestBody:
        description: Fields required to perform a mail merge and send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeRequest'
      responses:
        '201':
          description: Returns an array of message correspondence ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          $ref: '#/components/responses/Error'
  /emailMerge/preview:
    post:
      summary: Template mail merge validation & preview
      description: >-
        This endpoint returns an array of transformed message objects with the
        templates populated. Should there be validation errors, the endpoint
        will return a list of reasons why it failed validation.
      operationId: postPreview
      tags:
        - EmailMerge
      requestBody:
        description: Fields required to perform a mail merge and send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeRequest'
      responses:
        '200':
          description: Responds with the result of the validation
          content:
            application/json:
              schema:
                type: array
                description: A list of merged message objects
                items:
                  $ref: '#/components/schemas/MessageObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /status:
    get:
      summary: Queryable message transaction status
      description: >-
        This is a freeform query endpoint, and reasonably expects at least one
        of the parameters to be populated. The statusHistory property will
        always be an empty array from this specific endpoint.
      operationId: GetStatusQuery
      tags:
        - Message
      parameters:
        - $ref: '#/components/parameters/QueryMessageId'
        - $ref: '#/components/parameters/QueryStatus'
        - $ref: '#/components/parameters/QueryTag'
        - $ref: '#/components/parameters/QueryTransactionId'
      responses:
        '200':
          description: Returns the status of message transactions
          content:
            application/json:
              schema:
                type: array
                description: A list of message statuses
                items:
                  $ref: '#/components/schemas/StatusObject'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/status/{msgId}':
    get:
      summary: Status of a single message
      description: >-
        This endpoint retrieves and returns all of the information related to
        msgId. Unlike the queryable endpoint, this single element endpoint will
        yield all properties by default.
      operationId: GetStatusMessage
      tags:
        - Message
      parameters:
        - $ref: '#/components/parameters/PathMessageId'
      responses:
        '200':
          description: Returns the status of the message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /promote:
    post:
      summary: Promotes multiple messages
      description: >-
        This endpoint searches for and attempts to immediately promote and
        dispatch a set of messages that are still in the accepted, enqueued or
        delayed states. Messages cannot be promoted once they have begun
        processing.
      operationId: PostPromoteQuery
      tags:
        - Message
      parameters:
        - $ref: '#/components/parameters/QueryMessageId'
        - $ref: '#/components/parameters/QueryStatus'
        - $ref: '#/components/parameters/QueryTag'
        - $ref: '#/components/parameters/QueryTransactionId'
      responses:
        '202':
          description: Request is acknowledged but not necessarily completed
          headers:
            Content-Location:
              description: >-
                URL location to affected resource. Use the same query and path
                parameters as this request to find the affected resource.
              example: >-
                /api/v1/status?msgId=00000000-0000-0000-0000-000000000000&status=pending&tag=example&txId=00000000-0000-0000-0000-000000000000
              schema:
                type: string
                format: uri
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/promote/{msgId}':
    post:
      summary: Promotes a single message
      description: >-
        This endpoint will attempt to immediately promote and dispatch the
        specified msgId if the message is still in the accepted, enqueued or
        delayed states. Messages cannot be promoted once they have begun
        processing.
      operationId: PostPromoteMessage
      tags:
        - Message
      parameters:
        - $ref: '#/components/parameters/PathMessageId'
      responses:
        '202':
          description: Request is acknowledged but not necessarily completed
          headers:
            Content-Location:
              description: >-
                URL location to affected resource. Use the same query and path
                parameters as this request to find the affected resource.
              example: /api/v1/status/00000000-0000-0000-0000-000000000000
              schema:
                type: string
                format: uri
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cancel:
    delete:
      summary: Cancel multiple delayed messages
      description: >-
        This endpoint searches for and will cancel and terminate a set of
        messages that are still in an enqueued/delayed state. Messages cannot be
        cancelled once they are beyond the processing state.
      operationId: DeleteCancelQuery
      tags:
        - Message
      parameters:
        - $ref: '#/components/parameters/QueryMessageId'
        - $ref: '#/components/parameters/QueryStatus'
        - $ref: '#/components/parameters/QueryTag'
        - $ref: '#/components/parameters/QueryTransactionId'
      responses:
        '202':
          description: Request is acknowledged but not necessarily completed
          headers:
            Content-Location:
              description: >-
                URL location to affected resource. Use the same query and path
                parameters as this request to find the affected resource.
              example: >-
                /api/v1/status?msgId=00000000-0000-0000-0000-000000000000&status=pending&tag=example&txId=00000000-0000-0000-0000-000000000000
              schema:
                type: string
                format: uri
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/cancel/{msgId}':
    delete:
      summary: Cancel a single delayed message
      description: >-
        This endpoint will cancel and terminate the specified msgId if the
        message is still in an enqueued/delayed state. Messages cannot be
        cancelled once they are beyond the processing state.
      operationId: DeleteCancelMessage
      tags:
        - Message
      parameters:
        - $ref: '#/components/parameters/PathMessageId'
      responses:
        '202':
          description: Request is acknowledged but not necessarily completed
          headers:
            Content-Location:
              description: >-
                URL location to affected resource. Use the same query and path
                parameters as this request to find the affected resource.
              example: /api/v1/status/00000000-0000-0000-0000-000000000000
              schema:
                type: string
                format: uri
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  parameters:
    PathMessageId:
      in: path
      name: msgId
      description: Uuid of the message
      required: true
      schema:
        type: string
        format: uuid
        example: 00000000-0000-0000-0000-000000000000
    QueryMessageId:
      in: query
      name: msgId
      description: Uuid of a message
      schema:
        type: string
        format: uuid
        example: 00000000-0000-0000-0000-000000000000
    QueryStatus:
      in: query
      name: status
      description: Yield messages in the specified status
      schema:
        type: string
        enum:
          - accepted
          - cancelled
          - completed
          - failed
          - pending
      example: pending
    QueryTag:
      in: query
      name: tag
      description: The desired messages with the specified tag association
      schema:
        type: string
      example: tag
    QueryTransactionId:
      in: query
      name: txId
      description: The desired messages associated with the transaction uuid
      schema:
        type: string
        format: uuid
      example: 00000000-0000-0000-0000-000000000000
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OpenID:
      type: openIdConnect
      openIdConnectUrl: >-
        https://oidc.gov.bc.ca/auth/realms/jbd6rnxw/.well-known/openid-configuration
  schemas:
    AttachmentObject:
      type: object
      properties:
        content:
          type: string
          description: 'String, Buffer or a Stream contents for the attachment'
          example: PGI+SGVsbG8gV29ybGRcITwvYj4=
        contentType:
          type: string
          description: >-
            Optional content type for the attachment, if not set will be derived
            from the filename property
        encoding:
          type: string
          description: >-
            If set and content is string, then encodes the content to a Buffer
            using the specified encoding. Example values: 'base64', 'hex',
            'binary' etc. Useful if you want to use binary attachments in a JSON
            formatted email object.
          enum:
            - base64
            - binary
            - hex
          example: base64
        filename:
          type: string
          description: >-
            Filename to be reported as the name of the attached file. Use of
            unicode is allowed.
          example: testfile.txt
    BadRequest:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            status:
              example: 400
            title:
              example: Bad Request
            type:
              example: 'https://httpstatuses.com/400'
    Conflict:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            status:
              example: 409
            title:
              example: Conflict
            type:
              example: 'https://httpstatuses.com/409'
    ContextObject:
      type: object
      required:
        - context
        - to
      properties:
        bcc:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the bcc:
            field
          example:
            - foo@gov.bc.ca
        cc:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the cc:
            field
          example:
            - fizz@gov.bc.ca
        context:
          type: object
          description: >-
            A freeform JSON object of key-value pairs.  All keys must be
            alphanumeric or underscore.
          example:
            something:
              greeting: Hello
              target: World
            someone: user
        delayTS:
          type: integer
          description: >-
            Desired UTC time for sending the message. 0 = Queue to send
            immediately
          example: 1570000000
        tag:
          type: string
          description: A unique string to be associated with the message
          example: tag
        to:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the To:
            field
          example:
            - baz@gov.bc.ca
    Error:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            status:
              example: 500
            title:
              example: Internal Server Error
            type:
              example: 'https://httpstatuses.com/500'
    Health:
      type: object
      required:
        - name
        - healthy
        - info
      properties:
        name:
          type: string
          description: The name of the dependency
          example: smtp
        healthy:
          type: boolean
          description: Is the dependency reachable/alive
        info:
          type: string
          description: >-
            Any extra information, generally useful when dependency is
            unreachable
          example: SMTP Service connected successfully.
    MergeRequest:
      type: object
      required:
        - bodyType
        - body
        - contexts
        - from
        - subject
      properties:
        attachments:
          type: array
          description: An array of Attachment objects
          items:
            $ref: '#/components/schemas/AttachmentObject'
        bodyType:
          type: string
          description: 'The email body type (html = content with html, text = plaintext)'
          enum:
            - html
            - text
          example: html
        body:
          type: string
          description: >-
            A body template of the message as an Unicode string. Refer to
            https://mozilla.github.io/nunjucks/templating.html for template
            syntax.
          example: '{{ something.greeting }} {{ something.target }} content'
        contexts:
          type: array
          description: An array of context objects
          items:
            $ref: '#/components/schemas/ContextObject'
        encoding:
          type: string
          description: >-
            Identifies encoding for text/html strings (defaults to 'utf-8',
            other values are 'hex' and 'base64')
          enum:
            - base64
            - binary
            - hex
            - utf-8
          default: utf-8
          example: utf-8
        from:
          type: string
          description: >-
            The email address of the sender. All email addresses can be plain
            'sender@server.com' or formatted '"Sender Name" <sender@server.com>'
          example: example@gov.bc.ca
        priority:
          type: string
          description: >-
            Sets message importance headers, either 'high', 'normal' (default)
            or 'low'.
          enum:
            - normal
            - low
            - high
          default: normal
          example: normal
        subject:
          type: string
          description: The email subject
          example: 'Hello {{ someone }}'
    MergeResponse:
      type: array
      items:
        $ref: '#/components/schemas/TransactionResponse'
    MessageAssociation:
      type: object
      required:
        - msgId
        - to
      properties:
        msgId:
          type: string
          description: A corresponding message uuid
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        tag:
          type: string
          description: A unique string which is associated with the message
          example: tag
        to:
          type: array
          items:
            type: string
          description: An array of recipient email addresses that this message will go to
          example:
            - baz@gov.bc.ca
    MessageObject:
      type: object
      required:
        - bodyType
        - body
        - from
        - to
        - subject
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentObject'
          description: An array of Attachment objects
        bcc:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the BCC:
            field
          example:
            - foo@gov.bc.ca
        bodyType:
          type: string
          description: 'The email body type (html = content with html, text = plaintext)'
          enum:
            - html
            - text
          example: html
        body:
          type: string
          description: The body of the message as an Unicode string
          example: Hello World content
        cc:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the CC:
            field
          example:
            - bar@gov.bc.ca
        delayTS:
          type: integer
          description: >-
            Desired UTC time for sending the message. 0 = Queue to send
            immediately
          example: 1570000000
        encoding:
          type: string
          description: >-
            Identifies encoding for text/html strings (defaults to 'utf-8',
            other values are 'hex' and 'base64')
          enum:
            - base64
            - binary
            - hex
            - utf-8
          default: utf-8
          example: utf-8
        from:
          type: string
          description: >-
            The email address of the sender. All email addresses can be plain
            'sender@server.com' or formatted '"Sender Name" <sender@server.com>'
          example: example@gov.bc.ca
        priority:
          type: string
          description: >-
            Sets message importance headers, either 'high', 'normal' (default)
            or 'low'.
          enum:
            - normal
            - low
            - high
          example: normal
        subject:
          type: string
          description: The email subject
          example: Hello user
        tag:
          type: string
          description: A unique string which is associated with the message
          example: tag
        to:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the To:
            field
          example:
            - baz@gov.bc.ca
    NotFound:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            status:
              example: 404
            title:
              example: Not Found
            type:
              example: 'https://httpstatuses.com/404'
    Problem:
      required:
        - type
        - title
        - status
        - detail
      properties:
        type:
          type: string
          description: 'What type of problem, link to explanation of problem'
        title:
          type: string
          description: 'Title of problem, generally the Http Status Code description'
        status:
          type: string
          description: The Http Status code
        detail:
          type: string
          description: Short description of why this problem was raised.
    SmtpObject:
      type: object
      description: The saved response object from the SMTP server if applicable
      properties:
        smtpMsgId:
          type: string
          description: The downstream smtp ID from the server
          example: <11111111-1111-1111-1111-111111111111@gov.bc.ca>
        response:
          type: string
          description: The downstream response message from the server
          example: >-
            250 2.6.0 <11111111-1111-1111-1111-111111111111@gov.bc.ca>
            [InternalId=82420422419525, Hostname=E6PEDG05.idir.BCGOV] 1464 bytes
            in 0.225, 6.333 KB/sec Queued mail for delivery
    StatusHistoryObject:
      type: array
      description: A list of status changes to this message
      items:
        type: object
        required:
          - description
          - status
          - timestamp
        properties:
          description:
            type: string
            description: The status message description if applicable
          status:
            $ref: '#/components/schemas/StatusType'
          timestamp:
            type: integer
            description: The moment in time this log event occured
    StatusObject:
      type: object
      required:
        - createdTS
        - delayTS
        - msgId
        - smtpResponse
        - status
        - statusHistory
        - tag
        - txId
        - updatedTS
      properties:
        createdTS:
          type: integer
          description: UTC time this service first received this message queue request
          example: 1560000000
        delayTS:
          type: integer
          description: >-
            Desired UTC time for sending the message. 0 = Queue to send
            immediately
          example: 1570000000
        msgId:
          type: string
          description: This message instance uuid
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        smtpResponse:
          $ref: '#/components/schemas/SmtpObject'
        status:
          $ref: '#/components/schemas/StatusType'
        statusHistory:
          $ref: '#/components/schemas/StatusHistoryObject'
        tag:
          type: string
          description: A unique string which is associated with the message
          example: tag
        txId:
          type: string
          description: The associated transaction uuid
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        updatedTS:
          type: integer
          description: UTC time this message queue request was last updated
          example: 1570000000
    StatusType:
      type: string
      description: The latest state of the message
      enum:
        - accepted
        - cancelled
        - completed
        - failed
        - pending
      example: completed
    TransactionResponse:
      type: object
      required:
        - txId
        - messages
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageAssociation'
        txId:
          type: string
          description: A corresponding transaction uuid
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          required:
            - errors
          properties:
            errors:
              type: array
              items:
                type: object
                required:
                  - message
                properties:
                  value:
                    type: object
                    description: Contents of the field that was in error.
                    example: utf-8x
                  message:
                    type: string
                    description: The error message for the field.
                    example: Invalid value `encoding`.
            status:
              example: 422
            title:
              example: Unprocessable Entity
            type:
              example: 'https://httpstatuses.com/422'
  responses:
    BadRequest:
      description: Request is missing content or is malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'
    Conflict:
      description: Request conflicts with server state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Conflict'
    Error:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Lack required role to perform action
    NoContent:
      description: Accepted and no content
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
    UnauthorizedError:
      description: Access token is missing or invalid
    UnprocessableEntity:
      description: >-
        The server was unable to process the contained instructions. Generally
        validation error(s).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
