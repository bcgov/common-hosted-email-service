---
openapi: 3.0.2
info:
  version: 1.1.0
  title: Common Hosted Email Service API
  description: CHES - Powered by NodeMailer (a shared library)
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
  contact:
    name: NR Common Service Showcase
    email: NR.CommonServiceShowcase@gov.bc.ca
servers:
  - url: /api/v1
    description: This Server
security:
  - BearerAuth: []
    OpenID: []
paths:
  /health:
    get:
      summary: Returns health checks of external service dependencies.
      description: >-
        This endpoint returns the state and connectivity of any external
        services CHES depends on.
      operationId: getHealth
      tags:
        - Health
      responses:
        "200":
          description: Returns the healthiness of the service dependencies
          content:
            application/json:
              schema:
                type: object
                required:
                  - dependencies
                properties:
                  dependencies:
                    type: array
                    description: A list of Health states
                    items:
                      $ref: "#/components/schemas/Health"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/Forbidden"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /email:
    post:
      summary: Send an email
      description: >-
        This endpoint accepts a single message and adds it to the queue. Should
        there be validation errors, the endpoint will return a list of reasons
        why it failed validation.
      operationId: postEmail
      tags:
        - Email
      security:
        - BearerAuth: []
          OpenID:
            - EMAILER
      requestBody:
        description: Fields required to perform a mail merge and send
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageObject"
      responses:
        "201":
          description: Returns the message correspondence id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/Forbidden"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /emailMerge:
    post:
      summary: Template mail merge & email sending
      description: >-
        This endpoint performs an email merge by serializing out the content and
        template and then adding the messages to the queue. Should there be
        validation errors, the endpoint will return a list of reasons why it
        failed validation.
      operationId: postMerge
      tags:
        - EmailMerge
      security:
        - BearerAuth: []
          OpenID:
            - EMAILER
      requestBody:
        description: Fields required to perform a mail merge and send
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MergeRequest"
      responses:
        "201":
          description: Returns an array of message correspondence ids
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MergeResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/Forbidden"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        default:
          $ref: "#/components/responses/Error"
  /emailMerge/preview:
    post:
      summary: Template mail merge validation & preview
      description: >-
        This endpoint returns an array of transformed message objects with the
        templates populated. Should there be validation errors, the endpoint
        will return a list of reasons why it failed validation.
      operationId: postPreview
      tags:
        - EmailMerge
      security:
        - BearerAuth: []
          OpenID:
            - EMAILER
      requestBody:
        description: Fields required to perform a mail merge and send
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MergeRequest"
      responses:
        "200":
          description: Responds with the result of the validation
          content:
            application/json:
              schema:
                type: array
                description: A list of merged message objects
                items:
                  $ref: "#/components/schemas/MessageObject"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/Forbidden"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /status:
    get:
      summary: Queryable message transaction status
      description: >-
        This is a freeform query endpoint, and reasonably expects at least one
        of the parameters to be populated. The statusHistory property will
        always be an empty array from this specific endpoint.
      operationId: GetStatusQuery
      tags:
        - Message
      security:
        - BearerAuth: []
          OpenID:
            - EMAILER
      parameters:
        - $ref: "#/components/parameters/QueryMessageId"
        - $ref: "#/components/parameters/QueryStatus"
        - $ref: "#/components/parameters/QueryTag"
        - $ref: "#/components/parameters/QueryTransactionId"
      responses:
        "200":
          description: Returns the status of message transactions
          content:
            application/json:
              schema:
                type: array
                description: A list of message statuses
                items:
                  $ref: "#/components/schemas/StatusObject"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/Forbidden"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/status/{msgId}":
    get:
      summary: Status of a single message
      description: >-
        This endpoint retrieves and returns all of the information related to
        msgId. Unlike the queryable endpoint, this single element endpoint will
        yield all properties by default.
      operationId: GetStatusMessage
      tags:
        - Message
      security:
        - BearerAuth: []
          OpenID:
            - EMAILER
      parameters:
        - $ref: "#/components/parameters/PathMessageId"
      responses:
        "200":
          description: Returns the status of the message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusObject"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /cancel:
    delete:
      summary: Cancel multiple delayed messages
      description: >-
        This endpoint searches for and will cancel and terminate a set of
        messages that are still in an enqueued/delayed state. Messages cannot be
        cancelled once they are beyond the processing state.
      operationId: DeleteCancelQuery
      tags:
        - Message
      security:
        - BearerAuth: []
          OpenID:
            - EMAILER
      parameters:
        - $ref: "#/components/parameters/QueryMessageId"
        - $ref: "#/components/parameters/QueryStatus"
        - $ref: "#/components/parameters/QueryTag"
        - $ref: "#/components/parameters/QueryTransactionId"
      responses:
        "202":
          description: Request is acknowledged but not necessarily completed
          headers:
            Content-Location:
              description: >-
                URL location to affected resource. Use the same query and path
                parameters as this request to find the affected resource.
              example: >-
                /api/v1/status?msgId=00000000-0000-0000-0000-000000000000&status=pending&tag=example&txId=00000000-0000-0000-0000-000000000000
              schema:
                type: string
                format: uri
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/Forbidden"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/cancel/{msgId}":
    delete:
      summary: Cancel a single delayed message
      description: >-
        This endpoint will cancel and terminate the specified msgId if the
        message is still in an enqueued/delayed state. Messages cannot be
        cancelled once they are beyond the processing state.
      operationId: DeleteCancelMessage
      tags:
        - Message
      security:
        - BearerAuth: []
          OpenID:
            - EMAILER
      parameters:
        - $ref: "#/components/parameters/PathMessageId"
      responses:
        "202":
          description: Request is acknowledged but not necessarily completed
          headers:
            Content-Location:
              description: >-
                URL location to affected resource. Use the same query and path
                parameters as this request to find the affected resource.
              example: /api/v1/status/00000000-0000-0000-0000-000000000000
              schema:
                type: string
                format: uri
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  parameters:
    PathMessageId:
      in: path
      name: msgId
      description: Uuid of the message
      required: true
      schema:
        type: string
        format: uuid
        example: 00000000-0000-0000-0000-000000000000
    QueryMessageId:
      in: query
      name: msgId
      description: Uuid of a message
      schema:
        type: string
        format: uuid
        example: 00000000-0000-0000-0000-000000000000
    QueryStatus:
      in: query
      name: status
      description: Yield messages in the specified status
      schema:
        type: string
        enum:
          - accepted
          - cancelled
          - completed
          - failed
          - pending
      example: pending
    QueryTag:
      in: query
      name: tag
      description: The desired messages with the specified tag association
      schema:
        type: string
      example: tag
    QueryTransactionId:
      in: query
      name: txId
      description: The desired messages associated with the transaction uuid
      schema:
        type: string
        format: uuid
      example: 00000000-0000-0000-0000-000000000000
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OpenID:
      type: openIdConnect
      openIdConnectUrl: "https://example.com/.well-known/openid-configuration"
  schemas:
    AttachmentObject:
      type: object
      properties:
        content:
          type: string
          description: "String, Buffer or a Stream contents for the attachment"
          example: PGI+SGVsbG8gV29ybGRcITwvYj4=
        contentType:
          type: string
          description: >-
            Optional content type for the attachment, if not set will be derived
            from the filename property
        encoding:
          type: string
          description: >-
            If set and content is string, then encodes the content to a Buffer
            using the specified encoding. Example values: 'base64', 'hex',
            'binary' etc. Useful if you want to use binary attachments in a JSON
            formatted email object.
          enum:
            - base64
            - binary
            - hex
          example: base64
        filename:
          type: string
          description: >-
            Filename to be reported as the name of the attached file. Use of
            unicode is allowed.
          example: testfile.txt
    BadRequest:
      allOf:
        - $ref: "#/components/schemas/Problem"
        - type: object
          properties:
            status:
              example: 400
            title:
              example: Bad Request
            type:
              example: "https://httpstatuses.com/400"
    Conflict:
      allOf:
        - $ref: "#/components/schemas/Problem"
        - type: object
          properties:
            status:
              example: 409
            title:
              example: Conflict
            type:
              example: "https://httpstatuses.com/409"
    ContextObject:
      type: object
      required:
        - context
        - to
      properties:
        bcc:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the bcc:
            field
          example:
            - foo@gov.bc.ca
        cc:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the cc:
            field
          example:
            - fizz@gov.bc.ca
        context:
          type: object
          description: >-
            A freeform JSON object of key-value pairs.  All keys must be
            alphanumeric or underscore.
          example:
            something:
              greeting: Hello
              target: World
            someone: user
        delayTS:
          type: integer
          description: >-
            Desired UTC time for sending the message. 0 = Queue to send
            immediately
          example: 1570000000
        encryptionKeys:
          type: array
          items:
            type: string
          description: >-
            An optional array of ASCII Armored PGP Public Key Blocks. Newlines
            must be preserved and encoded as '\n'. Specify multiple key blocks
            in the array to sign for multiple recipients.
          example:
            - |-
              -----BEGIN PGP PUBLIC KEY BLOCK-----

              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
              =pYEL
              -----END PGP PUBLIC KEY BLOCK-----
        tag:
          type: string
          description: A unique string to be associated with the message
          example: tag
        to:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the To:
            field
          example:
            - baz@gov.bc.ca
    Error:
      allOf:
        - $ref: "#/components/schemas/Problem"
        - type: object
          properties:
            status:
              example: 500
            title:
              example: Internal Server Error
            type:
              example: "https://httpstatuses.com/500"
    Health:
      type: object
      required:
        - name
        - healthy
        - info
      properties:
        name:
          type: string
          description: The name of the dependency
          example: smtp
        healthy:
          type: boolean
          description: Is the dependency reachable/alive
        info:
          type: string
          description: >-
            Any extra information, generally useful when dependency is
            unreachable
          example: SMTP Service connected successfully.
    MergeRequest:
      type: object
      required:
        - bodyType
        - body
        - contexts
        - from
        - subject
      properties:
        attachments:
          type: array
          description: An array of Attachment objects
          items:
            $ref: "#/components/schemas/AttachmentObject"
        bodyType:
          type: string
          description: "The email body type (html = content with html, text = plaintext)"
          enum:
            - html
            - text
          example: html
        body:
          type: string
          description: >-
            A body template of the message as an Unicode string. Refer to
            https://mozilla.github.io/nunjucks/templating.html for template
            syntax.
          example: "{{ something.greeting }} {{ something.target }} content"
        contexts:
          type: array
          description: An array of context objects
          items:
            $ref: "#/components/schemas/ContextObject"
        encoding:
          type: string
          description: >-
            Identifies encoding for text/html strings (defaults to 'utf-8',
            other values are 'hex' and 'base64')
          enum:
            - base64
            - binary
            - hex
            - utf-8
          default: utf-8
          example: utf-8
        from:
          type: string
          description: >-
            The email address of the sender. All email addresses can be plain
            'sender@server.com' or formatted '"Sender Name" <sender@server.com>'
          example: example@gov.bc.ca
        priority:
          type: string
          description: >-
            Sets message importance headers, either 'high', 'normal' (default)
            or 'low'.
          enum:
            - normal
            - low
            - high
          default: normal
          example: normal
        signingKey:
          type: string
          description: >-
            An optional ASCII Armored PGP Private Key Block. Newlines must be
            preserved and encoded as '\n'. Messages will not be encrypted nor
            signed unless encryptionKeys attribute is present.
          example: |-
            -----BEGIN PGP PRIVATE KEY BLOCK-----

            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
            =Wy0W
            -----END PGP PRIVATE KEY BLOCK-----
        signingKeyPassphrase:
          type: string
          description: >-
            An optional password to decrypt the ASCII Armored PGP Private Key
            Block specified in signingKey. Newlines must be preserved and
            encoded as '\n'. Messages will not be encrypted nor signed unless
            encryptionKeys attribute is present.
          example: hunter42
        subject:
          type: string
          description: The email subject
          example: "Hello {{ someone }}"
    MergeResponse:
      type: array
      items:
        $ref: "#/components/schemas/TransactionResponse"
    MessageAssociation:
      type: object
      required:
        - msgId
        - to
      properties:
        msgId:
          type: string
          description: A corresponding message uuid
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        tag:
          type: string
          description: A unique string which is associated with the message
          example: tag
        to:
          type: array
          items:
            type: string
          description: An array of recipient email addresses that this message will go to
          example:
            - baz@gov.bc.ca
    MessageObject:
      type: object
      required:
        - bodyType
        - body
        - from
        - to
        - subject
      properties:
        attachments:
          type: array
          items:
            $ref: "#/components/schemas/AttachmentObject"
          description: An array of Attachment objects
        bcc:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the BCC:
            field
          example:
            - foo@gov.bc.ca
        bodyType:
          type: string
          description: "The email body type (html = content with html, text = plaintext)"
          enum:
            - html
            - text
          example: html
        body:
          type: string
          description: The body of the message as an Unicode string
          example: Hello World content
        cc:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the CC:
            field
          example:
            - bar@gov.bc.ca
        delayTS:
          type: integer
          description: >-
            Desired UTC time for sending the message. 0 = Queue to send
            immediately
          example: 1570000000
        encoding:
          type: string
          description: >-
            Identifies encoding for text/html strings (defaults to 'utf-8',
            other values are 'hex' and 'base64')
          enum:
            - base64
            - binary
            - hex
            - utf-8
          default: utf-8
          example: utf-8
        encryptionKeys:
          type: array
          items:
            type: string
          description: >-
            An optional array of ASCII Armored PGP Public Key Blocks. Newlines
            must be preserved and encoded as '\n'. Specify multiple key blocks
            in the array to sign for multiple recipients.
          example:
            - |-
              -----BEGIN PGP PUBLIC KEY BLOCK-----

              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
              =pYEL
              -----END PGP PUBLIC KEY BLOCK-----
        from:
          type: string
          description: >-
            The email address of the sender. All email addresses can be plain
            'sender@server.com' or formatted '"Sender Name" <sender@server.com>'
          example: example@gov.bc.ca
        priority:
          type: string
          description: >-
            Sets message importance headers, either 'high', 'normal' (default)
            or 'low'.
          enum:
            - normal
            - low
            - high
          example: normal
        signingKey:
          type: string
          description: >-
            An optional ASCII Armored PGP Private Key Block. Newlines must be
            preserved and encoded as '\n'. Messages will not be encrypted nor
            signed unless encryptionKeys attribute is present.
          example: |-
            -----BEGIN PGP PRIVATE KEY BLOCK-----

            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
            =Wy0W
            -----END PGP PRIVATE KEY BLOCK-----
        signingKeyPassphrase:
          type: string
          description: >-
            An optional password to decrypt the ASCII Armored PGP Private Key
            Block specified in signingKey. Newlines must be preserved and
            encoded as '\n'. Messages will not be encrypted nor signed unless
            encryptionKeys attribute is present.
          example: hunter42
        subject:
          type: string
          description: The email subject
          example: Hello user
        tag:
          type: string
          description: A unique string which is associated with the message
          example: tag
        to:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the To:
            field
          example:
            - baz@gov.bc.ca
    NotFound:
      allOf:
        - $ref: "#/components/schemas/Problem"
        - type: object
          properties:
            status:
              example: 404
            title:
              example: Not Found
            type:
              example: "https://httpstatuses.com/404"
    Problem:
      required:
        - type
        - title
        - status
        - detail
      properties:
        type:
          type: string
          description: "What type of problem, link to explanation of problem"
        title:
          type: string
          description: "Title of problem, generally the Http Status Code description"
        status:
          type: string
          description: The Http Status code
        detail:
          type: string
          description: Short description of why this problem was raised.
    StatusHistoryObject:
      type: array
      description: A list of status changes to this message
      items:
        type: object
        required:
          - description
          - status
          - timestamp
        properties:
          description:
            type: string
            description: The status message description if applicable
          status:
            $ref: "#/components/schemas/StatusType"
          timestamp:
            type: integer
            description: The moment in time this log event occured
    StatusObject:
      type: object
      required:
        - createdTS
        - delayTS
        - msgId
        - status
        - statusHistory
        - tag
        - txId
        - updatedTS
      properties:
        createdTS:
          type: integer
          description: UTC time this service first received this message queue request
          example: 1560000000
        delayTS:
          type: integer
          description: >-
            Desired UTC time for sending the message. 0 = Queue to send
            immediately
          example: 1570000000
        msgId:
          type: string
          description: This message instance uuid
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        status:
          $ref: "#/components/schemas/StatusType"
        statusHistory:
          $ref: "#/components/schemas/StatusHistoryObject"
        tag:
          type: string
          description: A unique string which is associated with the message
          example: tag
        txId:
          type: string
          description: The associated transaction uuid
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        updatedTS:
          type: integer
          description: UTC time this message queue request was last updated
          example: 1570000000
    StatusType:
      type: string
      description: The latest state of the message
      enum:
        - accepted
        - cancelled
        - completed
        - failed
        - pending
      example: completed
    TransactionResponse:
      type: object
      required:
        - txId
        - messages
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageAssociation"
        txId:
          type: string
          description: A corresponding transaction uuid
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
    ValidationError:
      allOf:
        - $ref: "#/components/schemas/Problem"
        - type: object
          required:
            - errors
          properties:
            errors:
              type: array
              items:
                type: object
                required:
                  - message
                properties:
                  value:
                    type: object
                    description: Contents of the field that was in error.
                    example: utf-8x
                  message:
                    type: string
                    description: The error message for the field.
                    example: Invalid value `encoding`.
            status:
              example: 422
            title:
              example: Unprocessable Entity
            type:
              example: "https://httpstatuses.com/422"
  responses:
    BadRequest:
      description: Request is missing content or is malformed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequest"
    Conflict:
      description: Request conflicts with server state
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Conflict"
    Error:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: Lack required role to perform action
    NoContent:
      description: Accepted and no content
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFound"
    UnauthorizedError:
      description: Access token is missing or invalid
    UnprocessableEntity:
      description: >-
        The server was unable to process the contained instructions. Generally
        validation error(s).
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationError"
