---
apiVersion: v1
kind: Template
labels:
  app: "${APP_NAME}-${JOB_NAME}"
  template: "${REPO_NAME}-template"
metadata:
  name: "${REPO_NAME}-app-dc"
objects:
- apiVersion: secops.pathfinder.gov.bc.ca/v1alpha1
  kind: NetworkSecurityPolicy
  metadata:
    name: "${APP_NAME}-app-${JOB_NAME}-pods-to-egress-${NAMESPACE}"
  spec:
    description: |
      Allow pods to open connections to the internet
    source:
      - - "$namespace=${NAMESPACE}"
        - "app=${APP_NAME}-${JOB_NAME}"
        - "deploymentconfig=${APP_NAME}-app-${JOB_NAME}"
        - role=app
    destination:
      - - ext:network=any
- apiVersion: secops.pathfinder.gov.bc.ca/v1alpha1
  kind: NetworkSecurityPolicy
  metadata:
    name: "${APP_NAME}-app-${JOB_NAME}-pods-to-patroni-master-${NAMESPACE}"
  spec:
    description: |
      Allow pods to open connections to patroni cluster
    source:
      - - "$namespace=${NAMESPACE}"
        - "app=${APP_NAME}-${JOB_NAME}"
        - "deploymentconfig=${APP_NAME}-app-${JOB_NAME}"
        - role=app
      - - "$namespace=${NAMESPACE}"
        - "openshift.io/deployer-pod.type=hook-pre"
    destination:
      - - "$namespace=${NAMESPACE}"
        - "cluster-name=${JOB_NAME}"
        - "statefulset=patroni-${JOB_NAME}"
        - role=master
- apiVersion: secops.pathfinder.gov.bc.ca/v1alpha1
  kind: NetworkSecurityPolicy
  metadata:
    name: "${APP_NAME}-app-${JOB_NAME}-pods-to-redis-${NAMESPACE}"
  spec:
    description: |
      Allow pods to open connections to redis
    source:
      - - "$namespace=${NAMESPACE}"
        - "app=${APP_NAME}-${JOB_NAME}"
        - "deploymentconfig=${APP_NAME}-app-${JOB_NAME}"
        - role=app
    destination:
      - - "$namespace=${NAMESPACE}"
        - "app=${APP_NAME}-${JOB_NAME}"
        - role=redis
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${APP_NAME}-app-${JOB_NAME}"
  spec:
    replicas: 2
    selector:
      app: "${APP_NAME}-${JOB_NAME}"
      deploymentconfig: "${APP_NAME}-app-${JOB_NAME}"
      role: app
    strategy:
      type: Rolling
      rollingParams:
        timeoutSeconds: 600
        pre:
          failurePolicy: Abort
          execNewPod:
            command:
              - npm
              - run
              - migrate
            containerName: "${APP_NAME}-app-${JOB_NAME}"
            env:
              - name: NODE_ENV
                value: production
              - name: DB_DATABASE
                valueFrom:
                  secretKeyRef:
                    key: app-db-name
                    name: "patroni-${JOB_NAME}-secret"
              - name: DB_HOST
                value: "patroni-${JOB_NAME}"
              - name: DB_USERNAME
                valueFrom:
                  secretKeyRef:
                    key: app-db-username
                    name: "patroni-${JOB_NAME}-secret"
              - name: DB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: app-db-password
                    name: "patroni-${JOB_NAME}-secret"
        resources: {}
    template:
      metadata:
        labels:
          app: "${APP_NAME}-${JOB_NAME}"
          deploymentconfig: "${APP_NAME}-app-${JOB_NAME}"
          role: app
      spec:
        containers:
        - image: docker-registry.default.svc:5000/${NAMESPACE}/${REPO_NAME}-app:${JOB_NAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: "${APP_NAME}-app-${JOB_NAME}"
          ports:
          - containerPort: 3000
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          env:
          - name: NODE_ENV
            value: production
          - name: DB_DATABASE
            valueFrom:
              secretKeyRef:
                key: app-db-name
                name: "patroni-${JOB_NAME}-secret"
          - name: DB_HOST
            value: "patroni-${JOB_NAME}"
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                key: app-db-username
                name: "patroni-${JOB_NAME}-secret"
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: app-db-password
                name: "patroni-${JOB_NAME}-secret"
          - name: KC_CLIENTID
            valueFrom:
              secretKeyRef:
                key: username
                name: ches-keycloak-secret
          - name: KC_CLIENTSECRET
            valueFrom:
              secretKeyRef:
                key: password
                name: ches-keycloak-secret
          - name: REDIS_HOST
            value: "redis-${JOB_NAME}"
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: redis-${JOB_NAME}-secret
          - name: CMNSRV_CLIENTID
            valueFrom:
              secretKeyRef:
                key: username
                name: ches-common-service-secret
          - name: CMNSRV_CLIENTSECRET
            valueFrom:
              secretKeyRef:
                key: password
                name: ches-common-service-secret
          envFrom:
          - configMapRef:
              name: ches-keycloak-config
          - configMapRef:
              name: ches-server-config
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - "${APP_NAME}-app-${JOB_NAME}"
        from:
          kind: ImageStreamTag
          name: "${REPO_NAME}-app:${JOB_NAME}"
          namespace: "${NAMESPACE}"
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    name: "${APP_NAME}-app-${JOB_NAME}"
  spec:
    ports:
    - name: 3000-tcp
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app: "${APP_NAME}-${JOB_NAME}"
      deploymentconfig: "${APP_NAME}-app-${JOB_NAME}"
      role: app
- apiVersion: v1
  kind: Route
  metadata:
    name: "${APP_NAME}-app-${JOB_NAME}"
  spec:
    host: "${HOST_ROUTE}"
    path: /
    port:
      targetPort: 3000-tcp
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: "${APP_NAME}-app-${JOB_NAME}"
      weight: 100
    wildcardPolicy: None
parameters:
- name: REPO_NAME
  description: Application repository name
  displayName: Repository Name
  required: true
- name: JOB_NAME
  description: Job identifier (i.e. 'pr-5' OR 'master')
  displayName: Job Branch Name
  required: true
- name: NAMESPACE
  description: Target namespace reference (i.e. '9f0fbe-dev')
  displayName: Target Namespace
  required: true
- name: APP_NAME
  description: Application name
  displayName: Application name
  required: true
- name: HOST_ROUTE
  description: The host the route will use to expose service outside cluster
  displayName: Host route
  required: true
