---
apiVersion: template.openshift.io/v1
kind: Template
labels:
  app.kubernetes.io/component: app
  app.kubernetes.io/instance: "${APP_NAME}-${JOB_NAME}"
  app.kubernetes.io/managed-by: githubactions
  app.kubernetes.io/name: nodejs
  app.kubernetes.io/part-of: "${APP_NAME}-${JOB_NAME}"
  app: "${APP_NAME}-${JOB_NAME}"
  template: "${REPO_NAME}-app-dc-template"
metadata:
  name: "${REPO_NAME}-app-dc"
objects:
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-openshift-ingress-to-${APP_NAME}-app-${JOB_NAME}
    spec:
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  network.openshift.io/policy-group: ingress
          ports:
            - port: 3000
              protocol: TCP
      podSelector:
        matchLabels:
          app: "${APP_NAME}-${JOB_NAME}"
          deploymentconfig: "${APP_NAME}-app-${JOB_NAME}"
          role: app
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: "allow-${APP_NAME}-app-${JOB_NAME}-to-patroni-${JOB_NAME}-cluster"
    spec:
      # Allow app to talk to Patroni cluster
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  app: "${APP_NAME}-${JOB_NAME}"
                  deploymentconfig: "${APP_NAME}-app-${JOB_NAME}"
                  role: app
          ports:
            - port: 5432
              protocol: TCP
      podSelector:
        matchLabels:
          cluster-name: "${JOB_NAME}"
          statefulset: "patroni-${JOB_NAME}"
          role: master
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: "allow-pre-hook-to-patroni-${JOB_NAME}-cluster"
    spec:
      # Allow app pre-hook pods to talk to Patroni cluster
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  openshift.io/deployer-pod.type: hook-pre
          ports:
            - port: 5432
              protocol: TCP
      podSelector:
        matchLabels:
          cluster-name: "${JOB_NAME}"
          statefulset: "patroni-${JOB_NAME}"
          role: master
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: "allow-${APP_NAME}-app-${JOB_NAME}-to-redis-${JOB_NAME}"
    spec:
      # Allow app to talk to Redis
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  app: "${APP_NAME}-${JOB_NAME}"
                  deploymentconfig: "${APP_NAME}-app-${JOB_NAME}"
                  role: app
          ports:
            - port: 6379
              protocol: TCP
      podSelector:
        matchLabels:
          app: "redis-${JOB_NAME}"
          role: redis
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      annotations:
        app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"StatefulSet","name":"patroni-${JOB_NAME}"},{"apiVersion":"apps/v1","kind":"StatefulSet","name":"redis-${JOB_NAME}"},{"apiVersion":"apps.openshift.io/v1","kind":"DeploymentConfig","name":"redis-${JOB_NAME}"}]'
      name: "${APP_NAME}-app-${JOB_NAME}"
    spec:
      replicas: ${{REPLICAS}}
      revisionHistoryLimit: 10
      selector:
        app: "${APP_NAME}-${JOB_NAME}"
        deploymentconfig: "${APP_NAME}-app-${JOB_NAME}"
        role: app
      strategy:
        type: Rolling
        rollingParams:
          timeoutSeconds: 600
          pre:
            failurePolicy: Retry
            execNewPod:
              command:
                - npm
                - run
                - migrate
              containerName: app
              env:
                - name: NODE_ENV
                  value: production
                - name: DB_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: app-db-name
                      name: "patroni-${JOB_NAME}-secret"
                - name: DB_HOST
                  value: "patroni-${JOB_NAME}"
                - name: DB_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: app-db-username
                      name: "patroni-${JOB_NAME}-secret"
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: app-db-password
                      name: "patroni-${JOB_NAME}-secret"
          resources: {}
      template:
        metadata:
          labels:
            app: "${APP_NAME}-${JOB_NAME}"
            deploymentconfig: "${APP_NAME}-app-${JOB_NAME}"
            role: app
        spec:
          containers:
            - name: app
              image: "${IMAGE_REGISTRY}/${IMAGE_NAMESPACE}/${REPO_NAME}:${IMAGE_TAG}"
              imagePullPolicy: IfNotPresent
              livenessProbe:
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 15
                timeoutSeconds: 1
                failureThreshold: 3
              ports:
                - containerPort: 3000
                  protocol: TCP
              readinessProbe:
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 15
                timeoutSeconds: 1
                failureThreshold: 1
              resources:
                requests:
                  cpu: "${CPU_REQUEST}"
                  memory: "${MEMORY_REQUEST}"
                limits:
                  cpu: "${CPU_LIMIT}"
                  memory: "${MEMORY_LIMIT}"
              env:
                - name: NODE_ENV
                  value: production
                - name: DB_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: app-db-name
                      name: "patroni-${JOB_NAME}-secret"
                - name: DB_HOST
                  value: "patroni-${JOB_NAME}"
                - name: DB_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: app-db-username
                      name: "patroni-${JOB_NAME}-secret"
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: app-db-password
                      name: "patroni-${JOB_NAME}-secret"
                - name: KC_CLIENTID
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: ches-keycloak-secret
                - name: KC_CLIENTSECRET
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: ches-keycloak-secret
                - name: REDIS_CLUSTERMODE
                  valueFrom:
                    secretKeyRef:
                      key: clustermode
                      name: redis-${JOB_NAME}-secret
                - name: REDIS_HOST
                  value: "redis-${JOB_NAME}"
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: redis-${JOB_NAME}-secret
                - name: SERVER_LOGFILE
                  value: "/var/log/app.log"
              envFrom:
                - configMapRef:
                    name: ches-keycloak-config
                - configMapRef:
                    name: ches-server-config
              volumeMounts:
                - name: log-storage
                  mountPath: /var/log
            # Fluent-bit sidecar
            - name: fluent-bit
              image: docker.io/fluent/fluent-bit:3.1.0
              imagePullPolicy: IfNotPresent
              livenessProbe:
                httpGet:
                  path: /
                  port: 2020
                  scheme: HTTP
                initialDelaySeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
              ports:
                - containerPort: 2020
                  name: metrics
                  protocol: TCP
                - containerPort: 80
                  name: http-plugin
                  protocol: TCP
              readinessProbe:
                httpGet:
                  path: /
                  port: 2020
                  scheme: HTTP
                initialDelaySeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
              resources:
                requests:
                  cpu: "${LOGGING_CPU_REQUEST}"
                  memory: "${LOGGING_MEMORY_REQUEST}"
                limits:
                  cpu: "${LOGGING_CPU_LIMIT}"
                  memory: "${LOGGING_MEMORY_LIMIT}"
              volumeMounts:
                # mount log file location
                - name: log-storage
                  mountPath: /var/log
                # mount fluent-bit config file
                - name: fluent-bit-config
                  mountPath: /fluent-bit/etc/
          volumes:
            - name: log-storage
              emptyDir: {}
            # fluent-bit config file
            - name: fluent-bit-config
              configMap:
                name: fluent-bit-config
      test: false
      triggers:
        - type: ConfigChange
        # - type: ImageChange
        #   imageChangeParams:
        #     automatic: true
        #     containerNames:
        #       - app
        #     from:
        #       kind: ImageStreamTag
        #       name: "${REPO_NAME}-app:${JOB_NAME}"
        #       namespace: "${NAMESPACE}"
  - apiVersion: v1
    kind: Service
    metadata:
      name: "${APP_NAME}-app-${JOB_NAME}"
    spec:
      ports:
        - name: 3000-tcp
          port: 3000
          protocol: TCP
          targetPort: 3000
      selector:
        app: "${APP_NAME}-${JOB_NAME}"
        deploymentconfig: "${APP_NAME}-app-${JOB_NAME}"
        role: app
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: "${APP_NAME}-app-${JOB_NAME}"
    spec:
      host: "${HOST_ROUTE}"
      path: /
      port:
        targetPort: 3000-tcp
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: "${APP_NAME}-app-${JOB_NAME}"
        weight: 100
      wildcardPolicy: None
parameters:
  - name: APP_NAME
    description: Application name
    displayName: Application name
    required: true
  - name: HOST_ROUTE
    description: The host the route will use to expose service outside cluster
    displayName: Host route
    required: true
  - name: JOB_NAME
    description: Job identifier (i.e. 'pr-5' OR 'master')
    displayName: Job Branch Name
    required: true
  - name: REPLICAS
    description: The number of StatefulSet replicas to use.
    displayName: Replicas
    required: true
    value: "2"
  - name: IMAGE_REGISTRY
    description: The base container image registry
    displayName: Docker Image Registry
    required: true
    value: ghcr.io
  - name: IMAGE_NAMESPACE
    description: The image namespace
    displayName: Docker Image Namespace
    required: true
    value: bcgov
  - name: IMAGE_TAG
    description: The specific image tag to deploy
    displayName: Docker Image Tag
    required: true
    value: latest
  - name: NAMESPACE
    description: Target namespace reference (i.e. 'b160aa-dev')
    displayName: Target Namespace
    required: true
  - name: REPO_NAME
    description: Application repository name
    displayName: Repository Name
    required: true
  - name: CPU_LIMIT
    description: Limit Peak CPU per pod (in millicores ex. 1000m)
    displayName: CPU Limit
    value: 250m
  - name: CPU_REQUEST
    description: Requested CPU per pod (in millicores ex. 500m)
    displayName: CPU Request
    value: 50m
  - name: MEMORY_LIMIT
    description: Limit Peak Memory per pod (in gigabytes Gi or megabytes Mi ex. 2Gi)
    displayName: Memory Limit
    value: 1Gi
  - name: MEMORY_REQUEST
    description: Requested Memory per pod (in gigabytes Gi or megabytes Mi ex. 500Mi)
    displayName: Memory Request
    value: 256Mi
  # parameters for logging sidecar
  - name: LOGGING_CPU_LIMIT
    description: Limit Peak CPU per pod (in millicores ex. 1000m)
    displayName: CPU Limit
    value: 50m
  - name: LOGGING_CPU_REQUEST
    description: Requested CPU per pod (in millicores ex. 500m)
    displayName: CPU Request
    value: 10m
  - name: LOGGING_MEMORY_LIMIT
    description: Limit Peak Memory per pod (in gigabytes Gi or megabytes Mi ex. 2Gi)
    displayName: Memory Limit
    value: 64Mi
  - name: LOGGING_MEMORY_REQUEST
    description: Requested Memory per pod (in gigabytes Gi or megabytes Mi ex. 500Mi)
    displayName: Memory Request
    value: 16Mi
