{{- if .Values.config.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ches.configname" . }}-config
  {{- if not .Values.config.releaseScoped }}
  annotations:
    "helm.sh/resource-policy": keep
  {{- end }}
data: {{ toYaml .Values.config.configMap | nindent 2 }}
{{- end }}
{{ if eq .Release.Name "master" }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
data:
  fluent-bit.conf: |
    [SERVICE]
      Flush        5
      Daemon       Off
      # define the log format (see additional config map key/value)
      Parsers_File  parsers.conf
      Log_Level    info
      HTTP_Server   On
      HTTP_Listen   0.0.0.0
      HTTP_Port     2020

    [INPUT]
      # get logs from file written by node app (eg: CDOGS)
      Name   tail
      Path   /var/log/*
      Tag    app

    [FILTER]
      # exclude kube probe logs from app logs
      name   grep
      match  app
      Exclude  agent kube*

    [FILTER]
      name parser
      match app
      Key_Name log
      Parser apache
      Reserve_Data On
      Preserve_Key On

    [FILTER]
      # modify log entry to include more key/value pairs
      name    record_modifier
      match   app
      # add pod name
      Record  hostname ${HOSTNAME}
      # add productname (eg: 'cdogs')
      Record  product ches
      # add namespace
      Record namespace "{{ .Release.Namespace }}"

    [OUTPUT]
      #### send logs to fluentd:
      # using http to fluentd running in a separate 'Monitoring' (ixhmbm-*) namespace (via a service)
      Name    http
      Match   app
      Host    fluentd-csst.apps.silver.devops.gov.bc.ca
      Port    80
      Format json
      # the URI becomes the Tag available in fluentd
      URI /app
      # we can also send tag as a header
      #header_tag  app

      ### security:
      #tls                On
      #tls.debug         4
      #tls.verify        On
      #tls.ca_file       /fluent-bit/ssl/ca.crt.pem
      #tls.crt_file      /fluent-bit/ssl/client.crt.pem
      #tls.key_file      /fluent-bit/ssl/client.key.pem

    [OUTPUT]
      ### show all logs in standard out
      Name   stdout
      Match  *
  parsers.conf: |
    [PARSER]
      Name   apache
      Format regex
      Regex  ^(?<host>[^ ]*) [^ ]* (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*?)(?: +\S*)?)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")?$
      Time_Key time
      Time_Format %d/%b/%Y:%H:%M:%S %z
{{- end }}
